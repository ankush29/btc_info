{"ast":null,"code":"import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk'; // import axios from 'axios';\n\nimport appReducer from './appReducer';\n/**\n * Logs all actions and states after they are dispatched.\n */\n\nvar logger = function logger(store) {\n  return function (next) {\n    return function (action) {\n      console.group(action.type);\n      console.info('dispatching', action);\n      var result = next(action);\n      console.log('next state', store.getState());\n      console.groupEnd();\n      return result;\n    };\n  };\n}; // if you're also using redux-thunk, add it as a middleware\n\n\nvar createStoreWithMiddleware = compose(applyMiddleware(ReduxThunk, logger))(createStore);\nvar rootReducer = combineReducers({\n  app: appReducer\n});\n\nfunction configureStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return createStoreWithMiddleware(rootReducer, initialState);\n}\n\nvar store = module.hot ? configureStore(window.__REDUX_STATE__ || {}) : configureStore({});\nexport { configureStore, store };","map":{"version":3,"sources":["/Users/ankushsaini/Public/farm_engine/src/store/configureStore.js"],"names":["createStore","combineReducers","compose","applyMiddleware","ReduxThunk","appReducer","logger","store","next","action","console","group","type","info","result","log","getState","groupEnd","createStoreWithMiddleware","rootReducer","app","configureStore","initialState","module","hot","window","__REDUX_STATE__"],"mappings":"AAAA,SACEA,WADF,EACeC,eADf,EACgCC,OADhC,EACyCC,eADzC,QAEO,OAFP;AAIA,OAAOC,UAAP,MAAuB,aAAvB,C,CACA;;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AAEA;;;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAACC,MAAD,EAAY;AAC1CC,MAAAA,OAAO,CAACC,KAAR,CAAcF,MAAM,CAACG,IAArB;AACAF,MAAAA,OAAO,CAACG,IAAR,CAAa,aAAb,EAA4BJ,MAA5B;AACA,UAAMK,MAAM,GAAGN,IAAI,CAACC,MAAD,CAAnB;AACAC,MAAAA,OAAO,CAACK,GAAR,CAAY,YAAZ,EAA0BR,KAAK,CAACS,QAAN,EAA1B;AACAN,MAAAA,OAAO,CAACO,QAAR;AACA,aAAOH,MAAP;AACD,KAP2B;AAAA,GAAR;AAAA,CAApB,C,CASA;;;AACA,IAAMI,yBAAyB,GAAGhB,OAAO,CAACC,eAAe,CAACC,UAAD,EAAaE,MAAb,CAAhB,CAAP,CAChCN,WADgC,CAAlC;AAIA,IAAMmB,WAAW,GAAGlB,eAAe,CAAC;AAClCmB,EAAAA,GAAG,EAAEf;AAD6B,CAAD,CAAnC;;AAIA,SAASgB,cAAT,GAA2C;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;AACzC,SAAOJ,yBAAyB,CAACC,WAAD,EAAcG,YAAd,CAAhC;AACD;;AAED,IAAMf,KAAK,GAAGgB,MAAM,CAACC,GAAP,GACVH,cAAc,CAACI,MAAM,CAACC,eAAP,IAA0B,EAA3B,CADJ,GAEVL,cAAc,CAAC,EAAD,CAFlB;AAIA,SAASA,cAAT,EAAyBd,KAAzB","sourcesContent":["import {\n  createStore, combineReducers, compose, applyMiddleware,\n} from 'redux';\n\nimport ReduxThunk from 'redux-thunk';\n// import axios from 'axios';\n\nimport appReducer from './appReducer';\n\n/**\n * Logs all actions and states after they are dispatched.\n */\nconst logger = store => next => (action) => {\n  console.group(action.type);\n  console.info('dispatching', action);\n  const result = next(action);\n  console.log('next state', store.getState());\n  console.groupEnd();\n  return result;\n};\n\n// if you're also using redux-thunk, add it as a middleware\nconst createStoreWithMiddleware = compose(applyMiddleware(ReduxThunk, logger))(\n  createStore,\n);\n\nconst rootReducer = combineReducers({\n  app: appReducer,\n});\n\nfunction configureStore(initialState = {}) {\n  return createStoreWithMiddleware(rootReducer, initialState);\n}\n\nconst store = module.hot\n  ? configureStore(window.__REDUX_STATE__ || {})\n  : configureStore({});\n\nexport { configureStore, store };\n"]},"metadata":{},"sourceType":"module"}