{"ast":null,"code":"'use strict';\n\nvar Cell = require('./cell'),\n    Pledge = require('./pledge');\n\nvar Pipeline = function Pipeline(sessions) {\n  this._cells = sessions.map(function (session) {\n    return new Cell(session);\n  });\n  this._stopped = {\n    incoming: false,\n    outgoing: false\n  };\n};\n\nPipeline.prototype.processIncomingMessage = function (message, callback, context) {\n  if (this._stopped.incoming) return;\n\n  this._loop('incoming', this._cells.length - 1, -1, -1, message, callback, context);\n};\n\nPipeline.prototype.processOutgoingMessage = function (message, callback, context) {\n  if (this._stopped.outgoing) return;\n\n  this._loop('outgoing', 0, this._cells.length, 1, message, callback, context);\n};\n\nPipeline.prototype.close = function (callback, context) {\n  this._stopped = {\n    incoming: true,\n    outgoing: true\n  };\n\n  var closed = this._cells.map(function (a) {\n    return a.close();\n  });\n\n  if (callback) Pledge.all(closed).then(function () {\n    callback.call(context);\n  });\n};\n\nPipeline.prototype._loop = function (direction, start, end, step, message, callback, context) {\n  var cells = this._cells,\n      n = cells.length,\n      self = this;\n\n  while (n--) {\n    cells[n].pending(direction);\n  }\n\n  var pipe = function pipe(index, error, msg) {\n    if (index === end) return callback.call(context, error, msg);\n    cells[index][direction](error, msg, function (err, m) {\n      if (err) self._stopped[direction] = true;\n      pipe(index + step, err, m);\n    });\n  };\n\n  pipe(start, null, message);\n};\n\nmodule.exports = Pipeline;","map":null,"metadata":{},"sourceType":"script"}