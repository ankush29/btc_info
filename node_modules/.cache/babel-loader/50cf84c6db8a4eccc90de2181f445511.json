{"ast":null,"code":"import _classCallCheck from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ankushsaini/Public/btcTransaction/src/PageDefault.js\";\nimport React from 'react'; // import sockjs from 'sockjs';\n// import Stomp from '@stomp/stompjs';\n//\n// const socket = sockjs('wss://ws.blockchain.info/inv');\n\nvar wsUri = 'wss://ws.blockchain.info/inv'; // const ws = Stomp.over(socket);\n// console.log('ws---',ws);\n\nvar WebSocket =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WebSocket, _React$Component);\n\n  function WebSocket(props) {\n    var _this;\n\n    _classCallCheck(this, WebSocket);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocket).call(this, props));\n\n    _this.openevent = function () {\n      //debugger\n      //websocket.send({\"op\":\"unconfirmed_sub\"});\n      _this.setState({\n        connectionStatus: 'Connected'\n      });\n    };\n\n    _this.closeEvent = function () {\n      _this.setState({\n        connectionStatus: 'Disconnected'\n      });\n    };\n\n    _this.state = {\n      connectionStatus: ''\n    };\n    return _this;\n  } // state = {\n  //   ws,\n  //   timeStamp: Date.now(),\n  //   maxReconnect:1\n  // };\n\n\n  _createClass(WebSocket, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var websocketTest = new WebSocket(wsUri);\n      console.log('websocketTest', websocketTest);\n      websocketTest.onopen = this.openevent(); //websocketTest.onclose = this.closeEvent()\n      //this.setupWebSocket();\n    }\n  }, {\n    key: \"render\",\n    //  setupWebSocket = () => {\n    //    debugger\n    //    const webSoc = this.state.ws;\n    //    // webSoc.connect({}, this.connect);\n    //    // webSoc.message = (body) => this.setState({ timeStamp: Date.now()});\n    //    // webSoc.error = (err) => {\n    //    //   if (this.state.maxReconnect > 0) {\n    //    //     this.setState({ maxReconnect: this.state.maxReconnect - 1 }, this.connect);\n    //    //   }\n    //    // };\n    //  }\n    //\n    // connect = () => {\n    //   let webSocketUrls = {}\n    //   debugger\n    //   const channels = webSocketUrls[this.props.name];\n    //   this.setState({ maxReconnect: this.props.maxReconnect });\n    //   channels.forEach((channel) => {\n    //     const webSoc=this.state.ws;\n    //     webSoc.subscribe(channel.route, channel.callback);\n    //     //webSoc.send(registration.route, { timeStamp: this.state.timeStamp.toString() }, 'timeStamp');\n    //    });\n    //  }\n    value: function render() {\n      var connectionStatus = this.state.connectionStatus;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, connectionStatus);\n    }\n  }]);\n\n  return WebSocket;\n}(React.Component);\n\nexport { WebSocket as default };\nWebSocket.defaultProps = {\n  name: 'something',\n  maxReconnect: 5\n};","map":{"version":3,"sources":["/Users/ankushsaini/Public/btcTransaction/src/PageDefault.js"],"names":["React","wsUri","WebSocket","props","openevent","setState","connectionStatus","closeEvent","state","websocketTest","console","log","onopen","Component","defaultProps","name","maxReconnect"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;AACA;;AACA,IAAMC,KAAK,GAAG,8BAAd,C,CACA;AACA;;IACqBC,S;;;;;AACnB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;;AADiB,UAmBnBC,SAnBmB,GAmBP,YAAM;AAChB;AACA;AACA,YAAKC,QAAL,CAAc;AACZC,QAAAA,gBAAgB,EAAE;AADN,OAAd;AAGD,KAzBkB;;AAAA,UA2BnBC,UA3BmB,GA2BN,YAAM;AACjB,YAAKF,QAAL,CAAc;AACZC,QAAAA,gBAAgB,EAAE;AADN,OAAd;AAGD,KA/BkB;;AAEjB,UAAKE,KAAL,GAAa;AACXF,MAAAA,gBAAgB,EAAG;AADR,KAAb;AAFiB;AAKlB,G,CACD;AACA;AACA;AACA;AACA;;;;;wCACoB;AAClB,UAAMG,aAAa,GAAG,IAAIP,SAAJ,CAAcD,KAAd,CAAtB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BF,aAA5B;AACAA,MAAAA,aAAa,CAACG,MAAd,GAAuB,KAAKR,SAAL,EAAvB,CAHkB,CAIlB;AACA;AACD;;;AAeF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BACU;AAAA,UACCE,gBADD,GACsB,KAAKE,KAD3B,CACCF,gBADD;AAEP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMA,gBAAN,CADF;AAGD;;;;EA7DoCN,KAAK,CAACa,S;;SAAxBX,S;AA+DrBA,SAAS,CAACY,YAAV,GAAyB;AACvBC,EAAAA,IAAI,EAAE,WADiB;AAEvBC,EAAAA,YAAY,EAAE;AAFS,CAAzB","sourcesContent":["import React from 'react';\n// import sockjs from 'sockjs';\n// import Stomp from '@stomp/stompjs';\n//\n// const socket = sockjs('wss://ws.blockchain.info/inv');\nconst wsUri = 'wss://ws.blockchain.info/inv'\n// const ws = Stomp.over(socket);\n// console.log('ws---',ws);\nexport default class WebSocket extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connectionStatus : ''\n    }\n  }\n  // state = {\n  //   ws,\n  //   timeStamp: Date.now(),\n  //   maxReconnect:1\n  // };\n  componentDidMount() {\n    const websocketTest = new WebSocket(wsUri);\n    console.log('websocketTest',websocketTest);\n    websocketTest.onopen = this.openevent()\n    //websocketTest.onclose = this.closeEvent()\n    //this.setupWebSocket();\n  }\n\n  openevent = () => {\n    //debugger\n    //websocket.send({\"op\":\"unconfirmed_sub\"});\n    this.setState({\n      connectionStatus: 'Connected'\n    })\n  }\n\n  closeEvent = () => {\n    this.setState({\n      connectionStatus: 'Disconnected'\n    })\n  }\n //  setupWebSocket = () => {\n //    debugger\n //    const webSoc = this.state.ws;\n //    // webSoc.connect({}, this.connect);\n //    // webSoc.message = (body) => this.setState({ timeStamp: Date.now()});\n //    // webSoc.error = (err) => {\n //    //   if (this.state.maxReconnect > 0) {\n //    //     this.setState({ maxReconnect: this.state.maxReconnect - 1 }, this.connect);\n //    //   }\n //    // };\n //  }\n //\n // connect = () => {\n //   let webSocketUrls = {}\n //   debugger\n //   const channels = webSocketUrls[this.props.name];\n //   this.setState({ maxReconnect: this.props.maxReconnect });\n //   channels.forEach((channel) => {\n //     const webSoc=this.state.ws;\n //     webSoc.subscribe(channel.route, channel.callback);\n //     //webSoc.send(registration.route, { timeStamp: this.state.timeStamp.toString() }, 'timeStamp');\n //    });\n //  }\n  render() {\n    const { connectionStatus } = this.state\n    return (\n      <div>{connectionStatus}</div>\n    )\n  }\n}\nWebSocket.defaultProps = {\n  name: 'something',\n  maxReconnect: 5,\n};\n"]},"metadata":{},"sourceType":"module"}