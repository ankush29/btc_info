{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer,\n    Base = require('./base'),\n    Draft75 = require('./draft75'),\n    crypto = require('crypto'),\n    util = require('util');\n\nvar numberFromKey = function numberFromKey(key) {\n  return parseInt((key.match(/[0-9]/g) || []).join(''), 10);\n};\n\nvar spacesInKey = function spacesInKey(key) {\n  return (key.match(/ /g) || []).length;\n};\n\nvar Draft76 = function Draft76(request, url, options) {\n  Draft75.apply(this, arguments);\n  this._stage = -1;\n  this._body = [];\n  this.version = 'hixie-76';\n\n  this._headers.clear();\n\n  this._headers.set('Upgrade', 'WebSocket');\n\n  this._headers.set('Connection', 'Upgrade');\n\n  this._headers.set('Sec-WebSocket-Origin', this._request.headers.origin);\n\n  this._headers.set('Sec-WebSocket-Location', this.url);\n};\n\nutil.inherits(Draft76, Draft75);\nvar instance = {\n  BODY_SIZE: 8,\n  start: function start() {\n    if (!Draft75.prototype.start.call(this)) return false;\n    this._started = true;\n\n    this._sendHandshakeBody();\n\n    return true;\n  },\n  close: function close() {\n    if (this.readyState === 3) return false;\n    if (this.readyState === 1) this._write(Buffer.from([0xFF, 0x00]));\n    this.readyState = 3;\n    this.emit('close', new Base.CloseEvent(null, null));\n    return true;\n  },\n  _handshakeResponse: function _handshakeResponse() {\n    var headers = this._request.headers,\n        key1 = headers['sec-websocket-key1'],\n        key2 = headers['sec-websocket-key2'];\n    if (!key1) throw new Error('Missing required header: Sec-WebSocket-Key1');\n    if (!key2) throw new Error('Missing required header: Sec-WebSocket-Key2');\n    var number1 = numberFromKey(key1),\n        spaces1 = spacesInKey(key1),\n        number2 = numberFromKey(key2),\n        spaces2 = spacesInKey(key2);\n    if (number1 % spaces1 !== 0 || number2 % spaces2 !== 0) throw new Error('Client sent invalid Sec-WebSocket-Key headers');\n    this._keyValues = [number1 / spaces1, number2 / spaces2];\n    var start = 'HTTP/1.1 101 WebSocket Protocol Handshake',\n        headers = [start, this._headers.toString(), ''];\n    return Buffer.from(headers.join('\\r\\n'), 'binary');\n  },\n  _handshakeSignature: function _handshakeSignature() {\n    if (this._body.length < this.BODY_SIZE) return null;\n    var md5 = crypto.createHash('md5'),\n        buffer = Buffer.allocUnsafe(8 + this.BODY_SIZE);\n    buffer.writeUInt32BE(this._keyValues[0], 0);\n    buffer.writeUInt32BE(this._keyValues[1], 4);\n    Buffer.from(this._body).copy(buffer, 8, 0, this.BODY_SIZE);\n    md5.update(buffer);\n    return Buffer.from(md5.digest('binary'), 'binary');\n  },\n  _sendHandshakeBody: function _sendHandshakeBody() {\n    if (!this._started) return;\n\n    var signature = this._handshakeSignature();\n\n    if (!signature) return;\n\n    this._write(signature);\n\n    this._stage = 0;\n\n    this._open();\n\n    if (this._body.length > this.BODY_SIZE) this.parse(this._body.slice(this.BODY_SIZE));\n  },\n  _parseLeadingByte: function _parseLeadingByte(octet) {\n    if (octet !== 0xFF) return Draft75.prototype._parseLeadingByte.call(this, octet);\n    this._closing = true;\n    this._length = 0;\n    this._stage = 1;\n  }\n};\n\nfor (var key in instance) {\n  Draft76.prototype[key] = instance[key];\n}\n\nmodule.exports = Draft76;","map":null,"metadata":{},"sourceType":"script"}