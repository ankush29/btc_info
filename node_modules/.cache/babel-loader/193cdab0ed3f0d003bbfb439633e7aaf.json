{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer,\n    crypto = require('crypto'),\n    url = require('url'),\n    util = require('util'),\n    HttpParser = require('../http_parser'),\n    Base = require('./base'),\n    Hybi = require('./hybi'),\n    Proxy = require('./proxy');\n\nvar Client = function Client(_url, options) {\n  this.version = 'hybi-' + Hybi.VERSION;\n  Hybi.call(this, null, _url, options);\n  this.readyState = -1;\n  this._key = Client.generateKey();\n  this._accept = Hybi.generateAccept(this._key);\n  this._http = new HttpParser('response');\n  var uri = url.parse(this.url),\n      auth = uri.auth && Buffer.from(uri.auth, 'utf8').toString('base64');\n  if (this.VALID_PROTOCOLS.indexOf(uri.protocol) < 0) throw new Error(this.url + ' is not a valid WebSocket URL');\n  this._pathname = (uri.pathname || '/') + (uri.search || '');\n\n  this._headers.set('Host', uri.host);\n\n  this._headers.set('Upgrade', 'websocket');\n\n  this._headers.set('Connection', 'Upgrade');\n\n  this._headers.set('Sec-WebSocket-Key', this._key);\n\n  this._headers.set('Sec-WebSocket-Version', Hybi.VERSION);\n\n  if (this._protocols.length > 0) this._headers.set('Sec-WebSocket-Protocol', this._protocols.join(', '));\n  if (auth) this._headers.set('Authorization', 'Basic ' + auth);\n};\n\nutil.inherits(Client, Hybi);\n\nClient.generateKey = function () {\n  return crypto.randomBytes(16).toString('base64');\n};\n\nvar instance = {\n  VALID_PROTOCOLS: ['ws:', 'wss:'],\n  proxy: function proxy(origin, options) {\n    return new Proxy(this, origin, options);\n  },\n  start: function start() {\n    if (this.readyState !== -1) return false;\n\n    this._write(this._handshakeRequest());\n\n    this.readyState = 0;\n    return true;\n  },\n  parse: function parse(chunk) {\n    if (this.readyState === 3) return;\n    if (this.readyState > 0) return Hybi.prototype.parse.call(this, chunk);\n\n    this._http.parse(chunk);\n\n    if (!this._http.isComplete()) return;\n\n    this._validateHandshake();\n\n    if (this.readyState === 3) return;\n\n    this._open();\n\n    this.parse(this._http.body);\n  },\n  _handshakeRequest: function _handshakeRequest() {\n    var extensions = this._extensions.generateOffer();\n\n    if (extensions) this._headers.set('Sec-WebSocket-Extensions', extensions);\n    var start = 'GET ' + this._pathname + ' HTTP/1.1',\n        headers = [start, this._headers.toString(), ''];\n    return Buffer.from(headers.join('\\r\\n'), 'utf8');\n  },\n  _failHandshake: function _failHandshake(message) {\n    message = 'Error during WebSocket handshake: ' + message;\n    this.readyState = 3;\n    this.emit('error', new Error(message));\n    this.emit('close', new Base.CloseEvent(this.ERRORS.protocol_error, message));\n  },\n  _validateHandshake: function _validateHandshake() {\n    this.statusCode = this._http.statusCode;\n    this.headers = this._http.headers;\n    if (this._http.error) return this._failHandshake(this._http.error.message);\n    if (this._http.statusCode !== 101) return this._failHandshake('Unexpected response code: ' + this._http.statusCode);\n    var headers = this._http.headers,\n        upgrade = headers['upgrade'] || '',\n        connection = headers['connection'] || '',\n        accept = headers['sec-websocket-accept'] || '',\n        protocol = headers['sec-websocket-protocol'] || '';\n    if (upgrade === '') return this._failHandshake(\"'Upgrade' header is missing\");\n    if (upgrade.toLowerCase() !== 'websocket') return this._failHandshake(\"'Upgrade' header value is not 'WebSocket'\");\n    if (connection === '') return this._failHandshake(\"'Connection' header is missing\");\n    if (connection.toLowerCase() !== 'upgrade') return this._failHandshake(\"'Connection' header value is not 'Upgrade'\");\n    if (accept !== this._accept) return this._failHandshake('Sec-WebSocket-Accept mismatch');\n    this.protocol = null;\n\n    if (protocol !== '') {\n      if (this._protocols.indexOf(protocol) < 0) return this._failHandshake('Sec-WebSocket-Protocol mismatch');else this.protocol = protocol;\n    }\n\n    try {\n      this._extensions.activate(this.headers['sec-websocket-extensions']);\n    } catch (e) {\n      return this._failHandshake(e.message);\n    }\n  }\n};\n\nfor (var key in instance) {\n  Client.prototype[key] = instance[key];\n}\n\nmodule.exports = Client;","map":null,"metadata":{},"sourceType":"script"}