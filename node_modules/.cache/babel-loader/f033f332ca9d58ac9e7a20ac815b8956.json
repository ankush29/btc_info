{"ast":null,"code":"'use strict';\n\nvar util = require('util'),\n    HttpParser = require('../http_parser'),\n    Base = require('./base'),\n    Draft75 = require('./draft75'),\n    Draft76 = require('./draft76'),\n    Hybi = require('./hybi');\n\nvar Server = function Server(options) {\n  Base.call(this, null, null, options);\n  this._http = new HttpParser('request');\n};\n\nutil.inherits(Server, Base);\nvar instance = {\n  EVENTS: ['open', 'message', 'error', 'close'],\n  _bindEventListeners: function _bindEventListeners() {\n    this.messages.on('error', function () {});\n    this.on('error', function () {});\n  },\n  parse: function parse(chunk) {\n    if (this._delegate) return this._delegate.parse(chunk);\n\n    this._http.parse(chunk);\n\n    if (!this._http.isComplete()) return;\n    this.method = this._http.method;\n    this.url = this._http.url;\n    this.headers = this._http.headers;\n    this.body = this._http.body;\n    var self = this;\n    this._delegate = Server.http(this, this._options);\n    this._delegate.messages = this.messages;\n    this._delegate.io = this.io;\n\n    this._open();\n\n    this.EVENTS.forEach(function (event) {\n      this._delegate.on(event, function (e) {\n        self.emit(event, e);\n      });\n    }, this);\n    this.protocol = this._delegate.protocol;\n    this.version = this._delegate.version;\n    this.parse(this._http.body);\n    this.emit('connect', new Base.ConnectEvent());\n  },\n  _open: function _open() {\n    this.__queue.forEach(function (msg) {\n      this._delegate[msg[0]].apply(this._delegate, msg[1]);\n    }, this);\n\n    this.__queue = [];\n  }\n};\n['addExtension', 'setHeader', 'start', 'frame', 'text', 'binary', 'ping', 'close'].forEach(function (method) {\n  instance[method] = function () {\n    if (this._delegate) {\n      return this._delegate[method].apply(this._delegate, arguments);\n    } else {\n      this.__queue.push([method, arguments]);\n\n      return true;\n    }\n  };\n});\n\nfor (var key in instance) {\n  Server.prototype[key] = instance[key];\n}\n\nServer.isSecureRequest = function (request) {\n  if (request.connection && request.connection.authorized !== undefined) return true;\n  if (request.socket && request.socket.secure) return true;\n  var headers = request.headers;\n  if (!headers) return false;\n  if (headers['https'] === 'on') return true;\n  if (headers['x-forwarded-ssl'] === 'on') return true;\n  if (headers['x-forwarded-scheme'] === 'https') return true;\n  if (headers['x-forwarded-proto'] === 'https') return true;\n  return false;\n};\n\nServer.determineUrl = function (request) {\n  var scheme = this.isSecureRequest(request) ? 'wss:' : 'ws:';\n  return scheme + '//' + request.headers.host + request.url;\n};\n\nServer.http = function (request, options) {\n  options = options || {};\n  if (options.requireMasking === undefined) options.requireMasking = true;\n  var headers = request.headers,\n      version = headers['sec-websocket-version'],\n      key = headers['sec-websocket-key'],\n      key1 = headers['sec-websocket-key1'],\n      key2 = headers['sec-websocket-key2'],\n      url = this.determineUrl(request);\n  if (version || key) return new Hybi(request, url, options);else if (key1 || key2) return new Draft76(request, url, options);else return new Draft75(request, url, options);\n};\n\nmodule.exports = Server;","map":null,"metadata":{},"sourceType":"script"}