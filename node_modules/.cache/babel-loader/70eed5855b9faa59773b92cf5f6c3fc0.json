{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var App,\n      Listener,\n      Server,\n      chunking_test,\n      events,\n      fs,\n      generate_dispatcher,\n      iframe,\n      sockjsVersion,\n      trans_eventsource,\n      trans_htmlfile,\n      trans_jsonp,\n      trans_websocket,\n      trans_xhr,\n      utils,\n      webjs,\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      hasProp = {}.hasOwnProperty,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  };\n\n  events = require('events');\n  fs = require('fs');\n  webjs = require('./webjs');\n  utils = require('./utils');\n  trans_websocket = require('./trans-websocket');\n  trans_jsonp = require('./trans-jsonp');\n  trans_xhr = require('./trans-xhr');\n  iframe = require('./iframe');\n  trans_eventsource = require('./trans-eventsource');\n  trans_htmlfile = require('./trans-htmlfile');\n  chunking_test = require('./chunking-test');\n\n  sockjsVersion = function sockjsVersion() {\n    var pkg, x;\n\n    try {\n      pkg = fs.readFileSync(__dirname + '/../package.json', 'utf-8');\n    } catch (error) {\n      x = error;\n    }\n\n    if (pkg) {\n      return JSON.parse(pkg).version;\n    } else {\n      return null;\n    }\n  };\n\n  App = function (superClass) {\n    extend(App, superClass);\n\n    function App() {\n      return App.__super__.constructor.apply(this, arguments);\n    }\n\n    App.prototype.welcome_screen = function (req, res) {\n      res.setHeader('content-type', 'text/plain; charset=UTF-8');\n      res.writeHead(200);\n      res.end(\"Welcome to SockJS!\\n\");\n      return true;\n    };\n\n    App.prototype.handle_404 = function (req, res) {\n      res.setHeader('content-type', 'text/plain; charset=UTF-8');\n      res.writeHead(404);\n      res.end('404 Error: Page not found\\n');\n      return true;\n    };\n\n    App.prototype.disabled_transport = function (req, res, data) {\n      return this.handle_404(req, res, data);\n    };\n\n    App.prototype.h_sid = function (req, res, data) {\n      var jsid;\n      req.cookies = utils.parseCookie(req.headers.cookie);\n\n      if (typeof this.options.jsessionid === 'function') {\n        this.options.jsessionid(req, res);\n      } else if (this.options.jsessionid && res.setHeader) {\n        jsid = req.cookies['JSESSIONID'] || 'dummy';\n        res.setHeader('Set-Cookie', 'JSESSIONID=' + jsid + '; path=/');\n      }\n\n      return data;\n    };\n\n    App.prototype.log = function (severity, line) {\n      return this.options.log(severity, line);\n    };\n\n    return App;\n  }(webjs.GenericApp);\n\n  utils.objectExtend(App.prototype, iframe.app);\n  utils.objectExtend(App.prototype, chunking_test.app);\n  utils.objectExtend(App.prototype, trans_websocket.app);\n  utils.objectExtend(App.prototype, trans_jsonp.app);\n  utils.objectExtend(App.prototype, trans_xhr.app);\n  utils.objectExtend(App.prototype, trans_eventsource.app);\n  utils.objectExtend(App.prototype, trans_htmlfile.app);\n\n  generate_dispatcher = function generate_dispatcher(options) {\n    var opts_filters, p, prefix_dispatcher, t, transport_dispatcher;\n\n    p = function (_this) {\n      return function (s) {\n        return new RegExp('^' + options.prefix + s + '[/]?$');\n      };\n    }(this);\n\n    t = function (_this) {\n      return function (s) {\n        return [p('/([^/.]+)/([^/.]+)' + s), 'server', 'session'];\n      };\n    }(this);\n\n    opts_filters = function opts_filters(options_filter) {\n      if (options_filter == null) {\n        options_filter = 'xhr_options';\n      }\n\n      return ['h_sid', 'xhr_cors', 'cache_for', options_filter, 'expose'];\n    };\n\n    prefix_dispatcher = [['GET', p(''), ['welcome_screen']], ['GET', p('/iframe[0-9-.a-z_]*.html'), ['iframe', 'cache_for', 'expose']], ['OPTIONS', p('/info'), opts_filters('info_options')], ['GET', p('/info'), ['xhr_cors', 'h_no_cache', 'info', 'expose']], ['OPTIONS', p('/chunking_test'), opts_filters()], ['POST', p('/chunking_test'), ['xhr_cors', 'expect_xhr', 'chunking_test']]];\n    transport_dispatcher = [['GET', t('/jsonp'), ['h_sid', 'h_no_cache', 'jsonp']], ['POST', t('/jsonp_send'), ['h_sid', 'h_no_cache', 'expect_form', 'jsonp_send']], ['POST', t('/xhr'), ['h_sid', 'h_no_cache', 'xhr_cors', 'xhr_poll']], ['OPTIONS', t('/xhr'), opts_filters()], ['POST', t('/xhr_send'), ['h_sid', 'h_no_cache', 'xhr_cors', 'expect_xhr', 'xhr_send']], ['OPTIONS', t('/xhr_send'), opts_filters()], ['POST', t('/xhr_streaming'), ['h_sid', 'h_no_cache', 'xhr_cors', 'xhr_streaming']], ['OPTIONS', t('/xhr_streaming'), opts_filters()], ['GET', t('/eventsource'), ['h_sid', 'h_no_cache', 'eventsource']], ['GET', t('/htmlfile'), ['h_sid', 'h_no_cache', 'htmlfile']]];\n\n    if (options.websocket) {\n      prefix_dispatcher.push(['GET', p('/websocket'), ['raw_websocket']]);\n      transport_dispatcher.push(['GET', t('/websocket'), ['sockjs_websocket']]);\n    } else {\n      prefix_dispatcher.push(['GET', p('/websocket'), ['cache_for', 'disabled_transport']]);\n      transport_dispatcher.push(['GET', t('/websocket'), ['cache_for', 'disabled_transport']]);\n    }\n\n    return prefix_dispatcher.concat(transport_dispatcher);\n  };\n\n  Listener = function () {\n    function Listener(options1, emit) {\n      this.options = options1;\n      this.handler = bind(this.handler, this);\n      this.app = new App();\n      this.app.options = this.options;\n      this.app.emit = emit;\n      this.app.log('debug', 'SockJS v' + sockjsVersion() + ' ' + 'bound to ' + JSON.stringify(this.options.prefix));\n      this.dispatcher = generate_dispatcher(this.options);\n      this.webjs_handler = webjs.generateHandler(this.app, this.dispatcher);\n      this.path_regexp = new RegExp('^' + this.options.prefix + '([/].+|[/]?)$');\n    }\n\n    Listener.prototype.handler = function (req, res, extra) {\n      if (!req.url.match(this.path_regexp)) {\n        return false;\n      }\n\n      this.webjs_handler(req, res, extra);\n      return true;\n    };\n\n    Listener.prototype.getHandler = function () {\n      return function (_this) {\n        return function (a, b, c) {\n          return _this.handler(a, b, c);\n        };\n      }(this);\n    };\n\n    return Listener;\n  }();\n\n  Server = function (superClass) {\n    extend(Server, superClass);\n\n    function Server(user_options) {\n      this.options = {\n        prefix: '',\n        response_limit: 128 * 1024,\n        websocket: true,\n        faye_server_options: null,\n        jsessionid: false,\n        heartbeat_delay: 25000,\n        disconnect_delay: 5000,\n        log: function log(severity, line) {\n          return console.log(line);\n        },\n        sockjs_url: 'https://cdn.jsdelivr.net/sockjs/1/sockjs.min.js'\n      };\n\n      if (user_options) {\n        utils.objectExtend(this.options, user_options);\n      }\n    }\n\n    Server.prototype.listener = function (handler_options) {\n      var options;\n      options = utils.objectExtend({}, this.options);\n\n      if (handler_options) {\n        utils.objectExtend(options, handler_options);\n      }\n\n      return new Listener(options, function (_this) {\n        return function () {\n          return _this.emit.apply(_this, arguments);\n        };\n      }(this));\n    };\n\n    Server.prototype.installHandlers = function (http_server, handler_options) {\n      var handler;\n      handler = this.listener(handler_options).getHandler();\n      utils.overshadowListeners(http_server, 'request', handler);\n      utils.overshadowListeners(http_server, 'upgrade', handler);\n      return true;\n    };\n\n    Server.prototype.middleware = function (handler_options) {\n      var handler;\n      handler = this.listener(handler_options).getHandler();\n      handler.upgrade = handler;\n      return handler;\n    };\n\n    return Server;\n  }(events.EventEmitter);\n\n  exports.createServer = function (options) {\n    return new Server(options);\n  };\n\n  exports.listen = function (http_server, options) {\n    var srv;\n    srv = exports.createServer(options);\n\n    if (http_server) {\n      srv.installHandlers(http_server);\n    }\n\n    return srv;\n  };\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}