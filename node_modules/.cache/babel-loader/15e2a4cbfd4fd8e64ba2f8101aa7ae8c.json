{"ast":null,"code":"import _classCallCheck from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ankushsaini/Public/btcTransaction/src/PageDefault.js\";\nimport React from 'react';\n\nvar WebSocket =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WebSocket, _React$Component);\n\n  function WebSocket(props) {\n    var _this;\n\n    _classCallCheck(this, WebSocket);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocket).call(this, props));\n    _this.state = {\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(WebSocket, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // this is an \"echo\" websocket service\n      this.connection = new WebSocket('wss://echo.websocket.org'); // listen to onmessage event\n\n      debugger;\n\n      this.connection.onmessage = function (evt) {\n        // add the new message to state\n        _this2.setState({\n          messages: _this2.state.messages.concat([evt.data])\n        });\n      }; // for testing purposes: sending to the echo service which will send it back back\n\n\n      setInterval(function (_) {\n        _this2.connection.send(Math.random());\n      }, 2000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // slice(-5) gives us the five most recent messages\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, this.state.messages.slice(-5).map(function (msg, idx) {\n        return React.createElement(\"li\", {\n          key: 'msg-' + idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, msg);\n      }));\n    }\n  }]);\n\n  return WebSocket;\n}(React.Component);\n\nexport { WebSocket as default };\n;","map":{"version":3,"sources":["/Users/ankushsaini/Public/btcTransaction/src/PageDefault.js"],"names":["React","WebSocket","props","state","messages","connection","onmessage","evt","setState","concat","data","setInterval","_","send","Math","random","slice","map","msg","idx","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEqBC,S;;;;;AACnB,qBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,mFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAG;AAAb,KAAb;AAFgB;AAGjB;;;;wCAEkB;AAAA;;AAClB;AACA,WAAKC,UAAL,GAAkB,IAAIJ,SAAJ,CAAc,0BAAd,CAAlB,CAFkB,CAGlB;;AACA;;AACA,WAAKI,UAAL,CAAgBC,SAAhB,GAA4B,UAAAC,GAAG,EAAI;AACjC;AACA,QAAA,MAAI,CAACC,QAAL,CAAc;AACZJ,UAAAA,QAAQ,EAAG,MAAI,CAACD,KAAL,CAAWC,QAAX,CAAoBK,MAApB,CAA2B,CAAEF,GAAG,CAACG,IAAN,CAA3B;AADC,SAAd;AAGD,OALD,CALkB,CAYlB;;;AACAC,MAAAA,WAAW,CAAE,UAAAC,CAAC,EAAG;AACf,QAAA,MAAI,CAACP,UAAL,CAAgBQ,IAAhB,CAAsBC,IAAI,CAACC,MAAL,EAAtB;AACD,OAFU,EAER,IAFQ,CAAX;AAGD;;;6BAEQ;AACP;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKZ,KAAL,CAAWC,QAAX,CAAoBY,KAApB,CAA0B,CAAC,CAA3B,EAA8BC,GAA9B,CAAmC,UAACC,GAAD,EAAMC,GAAN;AAAA,eAAc;AAAI,UAAA,GAAG,EAAE,SAASA,GAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0BD,GAA1B,CAAd;AAAA,OAAnC,CAAN,CAAP;AACD;;;;EA3BqClB,KAAK,CAACoB,S;;SAAxBnB,S;AA4BpB","sourcesContent":["import React from 'react';\n\nexport default class WebSocket extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = { messages : [] }\n  }\n\n  componentDidMount(){\n   // this is an \"echo\" websocket service\n   this.connection = new WebSocket('wss://echo.websocket.org');\n   // listen to onmessage event\n   debugger\n   this.connection.onmessage = evt => {\n     // add the new message to state\n     this.setState({\n       messages : this.state.messages.concat([ evt.data ])\n     })\n   };\n\n   // for testing purposes: sending to the echo service which will send it back back\n   setInterval( _ =>{\n     this.connection.send( Math.random() )\n   }, 2000 )\n }\n\n render() {\n   // slice(-5) gives us the five most recent messages\n   return <ul>{ this.state.messages.slice(-5).map( (msg, idx) => <li key={'msg-' + idx }>{ msg }</li> )}</ul>;\n }\n};\n"]},"metadata":{},"sourceType":"module"}