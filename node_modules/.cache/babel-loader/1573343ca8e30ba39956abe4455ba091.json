{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var HtmlFileReceiver,\n      iframe_template,\n      transport,\n      utils,\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  utils = require('./utils');\n  transport = require('./transport');\n  iframe_template = \"<!doctype html>\\n<html><head>\\n  <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\" />\\n  <meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\\n</head><body><h2>Don't panic!</h2>\\n  <script>\\n    document.domain = document.domain;\\n    var c = parent.{{ callback }};\\n    c.start();\\n    function p(d) {c.message(d);};\\n    window.onload = function() {c.stop();};\\n  </script>\";\n  iframe_template += Array(1024 - iframe_template.length + 14).join(' ');\n  iframe_template += '\\r\\n\\r\\n';\n\n  HtmlFileReceiver = function (superClass) {\n    extend(HtmlFileReceiver, superClass);\n\n    function HtmlFileReceiver() {\n      return HtmlFileReceiver.__super__.constructor.apply(this, arguments);\n    }\n\n    HtmlFileReceiver.prototype.protocol = \"htmlfile\";\n\n    HtmlFileReceiver.prototype.doSendFrame = function (payload) {\n      return HtmlFileReceiver.__super__.doSendFrame.call(this, '<script>\\np(' + JSON.stringify(payload) + ');\\n</script>\\r\\n');\n    };\n\n    return HtmlFileReceiver;\n  }(transport.ResponseReceiver);\n\n  exports.app = {\n    htmlfile: function htmlfile(req, res) {\n      var callback;\n\n      if (!('c' in req.query || 'callback' in req.query)) {\n        throw {\n          status: 500,\n          message: '\"callback\" parameter required'\n        };\n      }\n\n      callback = 'c' in req.query ? req.query['c'] : req.query['callback'];\n\n      if (/[^a-zA-Z0-9-_.]/.test(callback)) {\n        throw {\n          status: 500,\n          message: 'invalid \"callback\" parameter'\n        };\n      }\n\n      res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n      res.writeHead(200);\n      res.write(iframe_template.replace(/{{ callback }}/g, callback));\n      transport.register(req, this, new HtmlFileReceiver(req, res, this.options));\n      return true;\n    }\n  };\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}