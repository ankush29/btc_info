{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var JsonpReceiver,\n      transport,\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  transport = require('./transport');\n\n  JsonpReceiver = function (superClass) {\n    extend(JsonpReceiver, superClass);\n    JsonpReceiver.prototype.protocol = \"jsonp-polling\";\n    JsonpReceiver.prototype.max_response_size = 1;\n\n    function JsonpReceiver(req, res, options, callback1) {\n      this.callback = callback1;\n\n      JsonpReceiver.__super__.constructor.call(this, req, res, options);\n    }\n\n    JsonpReceiver.prototype.doSendFrame = function (payload) {\n      return JsonpReceiver.__super__.doSendFrame.call(this, \"/**/\" + this.callback + \"(\" + JSON.stringify(payload) + \");\\r\\n\");\n    };\n\n    return JsonpReceiver;\n  }(transport.ResponseReceiver);\n\n  exports.app = {\n    jsonp: function jsonp(req, res, _, next_filter) {\n      var callback;\n\n      if (!('c' in req.query || 'callback' in req.query)) {\n        throw {\n          status: 500,\n          message: '\"callback\" parameter required'\n        };\n      }\n\n      callback = 'c' in req.query ? req.query['c'] : req.query['callback'];\n\n      if (/[^a-zA-Z0-9-_.]/.test(callback) || callback.length > 32) {\n        throw {\n          status: 500,\n          message: 'invalid \"callback\" parameter'\n        };\n      }\n\n      res.setHeader('X-Content-Type-Options', 'nosniff');\n      res.setHeader('Content-Type', 'application/javascript; charset=UTF-8');\n      res.writeHead(200);\n      transport.register(req, this, new JsonpReceiver(req, res, this.options, callback));\n      return true;\n    },\n    jsonp_send: function jsonp_send(req, res, query) {\n      var d, i, jsonp, len, message, x;\n\n      if (!query) {\n        throw {\n          status: 500,\n          message: 'Payload expected.'\n        };\n      }\n\n      if (typeof query === 'string') {\n        try {\n          d = JSON.parse(query);\n        } catch (error) {\n          x = error;\n          throw {\n            status: 500,\n            message: 'Broken JSON encoding.'\n          };\n        }\n      } else {\n        d = query.d;\n      }\n\n      if (typeof d === 'string' && d) {\n        try {\n          d = JSON.parse(d);\n        } catch (error) {\n          x = error;\n          throw {\n            status: 500,\n            message: 'Broken JSON encoding.'\n          };\n        }\n      }\n\n      if (!d || d.__proto__.constructor !== Array) {\n        throw {\n          status: 500,\n          message: 'Payload expected.'\n        };\n      }\n\n      jsonp = transport.Session.bySessionId(req.session);\n\n      if (jsonp === null) {\n        throw {\n          status: 404\n        };\n      }\n\n      for (i = 0, len = d.length; i < len; i++) {\n        message = d[i];\n        jsonp.didMessage(message);\n      }\n\n      res.setHeader('Content-Length', '2');\n      res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n      res.writeHead(200);\n      res.end('ok');\n      return true;\n    }\n  };\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}