{"ast":null,"code":"import _classCallCheck from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ankushsaini/Public/btcTransaction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ankushsaini/Public/btcTransaction/src/PageDefault.js\";\nimport React from 'react'; // import sockjs from 'sockjs';\n// import Stomp from '@stomp/stompjs';\n//\n// const socket = sockjs('wss://ws.blockchain.info/inv');\n\nvar wsUri = 'wss://ws.blockchain.info/inv'; // const ws = Stomp.over(socket);\n// console.log('ws---',ws);\n\nvar WebSocket =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WebSocket, _React$Component);\n\n  function WebSocket() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, WebSocket);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WebSocket)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.openevent = function () {\n      debugger;\n    };\n\n    _this.setupWebSocket = function () {\n      debugger;\n      var webSoc = _this.state.ws; // webSoc.connect({}, this.connect);\n      // webSoc.message = (body) => this.setState({ timeStamp: Date.now()});\n      // webSoc.error = (err) => {\n      //   if (this.state.maxReconnect > 0) {\n      //     this.setState({ maxReconnect: this.state.maxReconnect - 1 }, this.connect);\n      //   }\n      // };\n    };\n\n    _this.connect = function () {\n      var webSocketUrls = {};\n      debugger;\n      var channels = webSocketUrls[_this.props.name];\n\n      _this.setState({\n        maxReconnect: _this.props.maxReconnect\n      });\n\n      channels.forEach(function (channel) {\n        var webSoc = _this.state.ws;\n        webSoc.subscribe(channel.route, channel.callback); //webSoc.send(registration.route, { timeStamp: this.state.timeStamp.toString() }, 'timeStamp');\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(WebSocket, [{\n    key: \"componentDidMount\",\n    // state = {\n    //   ws,\n    //   timeStamp: Date.now(),\n    //   maxReconnect:1\n    // };\n    value: function componentDidMount() {\n      var websocket = new WebSocket(wsUri);\n      websocket.onopen = this.openevent(); //websocket.onclose = function(evt) { onClose(evt) };\n\n      debugger; //this.setupWebSocket();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"hgsdh\");\n    }\n  }]);\n\n  return WebSocket;\n}(React.Component);\n\nexport { WebSocket as default };\nWebSocket.defaultProps = {\n  name: 'something',\n  maxReconnect: 5\n};","map":{"version":3,"sources":["/Users/ankushsaini/Public/btcTransaction/src/PageDefault.js"],"names":["React","wsUri","WebSocket","openevent","setupWebSocket","webSoc","state","ws","connect","webSocketUrls","channels","props","name","setState","maxReconnect","forEach","channel","subscribe","route","callback","websocket","onopen","Component","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;AACA;;AACA,IAAMC,KAAK,GAAG,8BAAd,C,CACA;AACA;;IACqBC,S;;;;;;;;;;;;;;;;;;UAcnBC,S,GAAY,YAAM;AAChB;AACD,K;;UACDC,c,GAAiB,YAAM;AACrB;AACA,UAAMC,MAAM,GAAG,MAAKC,KAAL,CAAWC,EAA1B,CAFqB,CAGrB;AACA;AACA;AACA;AACA;AACA;AACA;AACD,K;;UAEFC,O,GAAU,YAAM;AACd,UAAIC,aAAa,GAAG,EAApB;AACA;AACA,UAAMC,QAAQ,GAAGD,aAAa,CAAC,MAAKE,KAAL,CAAWC,IAAZ,CAA9B;;AACA,YAAKC,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAE,MAAKH,KAAL,CAAWG;AAA3B,OAAd;;AACAJ,MAAAA,QAAQ,CAACK,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5B,YAAMX,MAAM,GAAC,MAAKC,KAAL,CAAWC,EAAxB;AACAF,QAAAA,MAAM,CAACY,SAAP,CAAiBD,OAAO,CAACE,KAAzB,EAAgCF,OAAO,CAACG,QAAxC,EAF4B,CAG5B;AACA,OAJF;AAKA,K;;;;;;;AAtCD;AACA;AACA;AACA;AACA;wCACoB;AAClB,UAAIC,SAAS,GAAG,IAAIlB,SAAJ,CAAcD,KAAd,CAAhB;AACAmB,MAAAA,SAAS,CAACC,MAAV,GAAmB,KAAKlB,SAAL,EAAnB,CAFkB,CAGlB;;AACA,eAJkB,CAKlB;AACD;;;6BA4BQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF;AAGD;;;;EA5CoCH,KAAK,CAACsB,S;;SAAxBpB,S;AA8CrBA,SAAS,CAACqB,YAAV,GAAyB;AACvBX,EAAAA,IAAI,EAAE,WADiB;AAEvBE,EAAAA,YAAY,EAAE;AAFS,CAAzB","sourcesContent":["import React from 'react';\n// import sockjs from 'sockjs';\n// import Stomp from '@stomp/stompjs';\n//\n// const socket = sockjs('wss://ws.blockchain.info/inv');\nconst wsUri = 'wss://ws.blockchain.info/inv'\n// const ws = Stomp.over(socket);\n// console.log('ws---',ws);\nexport default class WebSocket extends React.Component {\n  // state = {\n  //   ws,\n  //   timeStamp: Date.now(),\n  //   maxReconnect:1\n  // };\n  componentDidMount() {\n    let websocket = new WebSocket(wsUri);\n    websocket.onopen = this.openevent()\n    //websocket.onclose = function(evt) { onClose(evt) };\n    debugger\n    //this.setupWebSocket();\n  }\n\n  openevent = () => {\n    debugger\n  }\n  setupWebSocket = () => {\n    debugger\n    const webSoc = this.state.ws;\n    // webSoc.connect({}, this.connect);\n    // webSoc.message = (body) => this.setState({ timeStamp: Date.now()});\n    // webSoc.error = (err) => {\n    //   if (this.state.maxReconnect > 0) {\n    //     this.setState({ maxReconnect: this.state.maxReconnect - 1 }, this.connect);\n    //   }\n    // };\n  }\n\n connect = () => {\n   let webSocketUrls = {}\n   debugger\n   const channels = webSocketUrls[this.props.name];\n   this.setState({ maxReconnect: this.props.maxReconnect });\n   channels.forEach((channel) => {\n     const webSoc=this.state.ws;\n     webSoc.subscribe(channel.route, channel.callback);\n     //webSoc.send(registration.route, { timeStamp: this.state.timeStamp.toString() }, 'timeStamp');\n    });\n  }\n  render() {\n    return (\n      <div>hgsdh</div>\n    )\n  }\n}\nWebSocket.defaultProps = {\n  name: 'something',\n  maxReconnect: 5,\n};\n"]},"metadata":{},"sourceType":"module"}